getwd
getwd()
setwd("/Users/wilson/WorkSpace/tdde01/lab1")
getwd()
optdigits=as.data.frame(read.csv("optdigits.csv"))
ncol(optdigits)
optdigits[1,]
optdigits[1,1]
optdigits[1,1:64]
matrix(optdigits[1,1:64])
matrix(optdigits[1,1:64],)
matrix(optdigits[1,1:64],nrow = 8,ncol=8)
optdigits[1,65]
matrix(optdigits[2,1:64],nrow = 8,ncol=8)
optdigits[2,65]
install.packages("kknn")
library("kknn")
##
## install kknn
install.packages("kknn")
library("kknn")
## Divide into train, valid and test sets
optdigits=as.data.frame(read.csv("optdigits.csv"))
getwp()
getwd()
setwd("/Users/wilson/WorkSpace/tdde01/lab1")
## install kknn
install.packages("kknn")
library("kknn")
## Divide into train, valid and test sets
optdigits=as.data.frame(read.csv("optdigits.csv"))
n=dim.data.frame(optdigits)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=optdigits[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.25))
valid=optdigits[id2,]
id3=setdiff(id1,id2)
test=optdigits[id3,]
##
install.packages("kknn")
View(train)
View(train)
View(optdigits)
y_train=train[,65]
x_train=train[,-65]
kknn(formula=c<-(y_train~x_train),train,test,k=30,kernel="rectangular")
library(kknn)
kknn(formula=c<-(y_train~x_train),train,test,k=30,kernel="rectangular")
kknn(formula=c<-y_train~x_train,train,test,k=30,kernel="rectangular")
kknn(formula=c<-row[65]~row[-65],train,test,k=30,kernel="rectangular")
##
kknn(X0.19~.,train,test,k=30,kernel="rectangular")
##
model = kknn(X0.19~.,train,test,k=30,kernel="rectangular")
train_table=table(train)
train_table=as.table(train)
pred_model=predict(model,data=train)
/Users/wilson/WorkSpace/tdde01pred_model
pred_model
pred_model=predict(model,data=train[,-65])
pred_model
CM= table(train[,65],pred_model)
CM= table(test[,65],pred_model)
CM
##
model = kknn(X0.19~.,train,k=30,kernel="rectangular")
##
model = kknn(X0.19~.,data=train,k=30,kernel="rectangular")
##
model = kknn(X0.19~.,train =train,k=30,kernel="rectangular")
##
model = kknn(X0.19~.,train =train,test = test,k=30,kernel="rectangular")
pred_model=predict(model,data=train[,-65])
CM= table(test[,65],pred_model)
CM= table(train[,65],pred_model)
train_table = table(train)
train_table = as.data.frame(table(unlist(train)))
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
cm_train<- as_tibble(train_table)
pred_model=predict(model,data=test[,-65])
install.packages("caret")
example=confusionMatrix(data=pred_model,reference=test[,65])
pred_train=predict(model, data=train[,-65])
install.packages("caret")
teslibrary(caret)
pred_train = predict(model, data=train[,-65])
cm_train = confusionMatrix(data=pred_train, reference=train[,65])
library(caret)
pred_train = predict(model, data=train[,-65])
cm_train = confusionMatrix(data=pred_train, reference=train[,65])
model = kknn(X0.19~.,data=train, k=30, kernel="rectangular")
cm_train = confusionMatrix(data=pred_train, reference=as.factor(train[,65]))
print(dim(pred_train))
print(dim(pred_train))
print(dim(train[,65]))
print(dim(pred_train))
print(dim(train[,65]))
print(dim(as.matrix(pred_train)))
print(dim(as.matrix(train[,65])))
model = kknn(X0.19~., train=train, test=train,k=30, kernel="rectangular")
install.packages("caret")
library(caret)
pred_train = predict(model)
print(dim(as.matrix(pred_train)))
print(dim(as.matrix(train[,65])))
cm_train = confusionMatrix(data=pred_train, reference=as.factor(train[,65]))
install.packages("caret")
model = kknn(X0.19~., train=train, test=train,k=30, kernel="rectangular")
install.packages("kknn")
library(kknn)
model = kknn(X0.19~., train=train, test=train,k=30, kernel="rectangular")
##install.packages("caret")
library(caret)
pred_train = predict(model)
##print(dim(as.matrix(pred_train)))
##print(dim(as.matrix(train[,65])))
cm_train = confusionMatrix(data=pred_train, reference=as.factor(train[,65]))
print(dim(as.matrix(pred_train)))
cm_train = confusionMatrix(data=model$fitted.values, reference=as.factor(train[,65]))
cm_train = confusionMatrix(data=as.factor(model$fitted.values), reference=as.factor(train[,65]))
cm_train = confusionMatrix(data=t(model$fitted.values), reference=as.factor(train[,65]))
##print(dim(as.matrix(pred_train)))
print(dim(as.matrix(train[,65])))
print(dim(t(model$fitted.values)))
cm_train = confusionMatrix(data=(model$fitted.values), reference=as.factor(train[,65]))
print(dim((model$fitted.values)))
print(dim(as.matrix(model$fitted.values)))
cm_train = confusionMatrix(data=as.matrix(model$fitted.values), reference=as.factor(train[,65]))
cm_train = confusionMatrix(data=as.matrix(model$fitted.values), reference=as.matrix(train[,65]))
print(dim(as.matrix(model$fitted.valu
##print(dim(as.matrix(pred_train)))
print(dim(as.matrix(train[,65])))
print(dim(as.matrix(model$fitted.values)))
##print(dim(as.matrix(pred_train)))
print(dim(as.matrix(train[,65])))
print(dim(as.matrix(model$fitted.values)))
cm_train = confusionMatrix(data=as.matrix(model$fitted.values), reference=as.matrix(train[,65]))
##print(dim(as.matrix(pred_train)))
print(dim(table(train[,65])))
print(dim(tbale(model$fitted.values)))
print(dim(table(model$fitted.values)))
cm_train = confusionMatrix(table(model$fitted.values,train[,65]))
model$fitted.values
##
model = kknn(as.factor(X0.19)~., train=train, test=train,k=30, kernel="rectangular")
model$fitted.values
##
model = kknn(as.factor(train[,65])~., train=train, test=train,k=30, kernel="rectangular")
model$fitted.values
y_train=train[,65]
y_train
##
model = kknn(as.factor(train[,65])~., train=train, test=test,k=30, kernel="rectangular")
model$fitted.values
y_test[,65]
y_test=test[,65]
y_test
cm_train=confusionMatrix(data=model$fitted.values,reference = train[,65])
##print(dim(as.matrix(pred_train)))
print(dim(table(train[,65])))
##
model = kknn(as.factor(train[,65])~., train=train, test=train,k=30, kernel="rectangular")
cm_train=confusionMatrix(data=model$fitted.values,reference = as.factor( train[,65]))
View(cm_train)
print(cm_train)
model1=kknn(as.factor(train[,65])~., train=train, test=test,k=30, kernel="rectangular")
cm_test=confusionMatrix(data=model1$fitted.values,reference = as.factor( test[,65]))
print(cm_test)
model2=kknn(as.factor(train[,65])~., train=train, test=valid,k=30, kernel="rectangular")
cm_valid=confusionMatrix(data=model1$fitted.values,reference = as.factor( valid[,65]))
model2=kknn(as.factor(train[,65])~., train=train, test=valid,k=30, kernel="rectangular")
cm_valid=confusionMatrix(data=model2$fitted.values,reference = as.factor( valid[,65]))
print(cm_valid)
